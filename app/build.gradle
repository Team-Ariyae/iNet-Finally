plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}


android {
    compileSdk rootProject.ext.compileSdk
    ndkVersion rootProject.ext.ndkVersion
    
    namespace 'sp.hamrahvpn'
    testNamespace 'sp.hamrahvpnTest'

    defaultConfig {
        applicationId "sp.hamrahvpn"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            ndk.abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            ndk.abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            java.srcDirs += 'src/main/java'
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64' //select ABIs to build APKs for
            universalApk true //generate an additional APK that contains all the ABIs
        }
    }

    // map for the version code
    project.ext.versionCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]

    android.applicationVariants.configureEach { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            output.outputFileName = "Hamrah" + variant.versionName + "_" + output.getFilter(com.android.build.OutputFile.ABI) + ".apk"

            output.versionCodeOverride =
                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) *
                            1000000 + android.defaultConfig.versionCode
        }
    }

    aaptOptions {
        cruncherEnabled = false
    }

    lintOptions {
        disable 'MissingTranslation'//, 'ManifestResource'
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

     compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.aar', '*.jar'], exclude: [])
    testImplementation 'junit:junit:4.13.2'
    implementation "sp.vpn:module"

    // Androidx
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.fragment:fragment-ktx:1.6.2'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.viewpager2:viewpager2:1.1.0-beta02'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'

    // Animation lottie
    implementation('com.airbnb.android:lottie:6.4.0')
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    // Androidx ktx
    implementation 'androidx.activity:activity-ktx:1.8.2'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'

    //kotlin
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.9.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0'

    implementation 'com.tencent:mmkv-static:1.3.3'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'io.reactivex:rxjava:1.3.8'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'com.tbruyelle.rxpermissions:rxpermissions:0.9.4@aar'
    implementation 'com.github.jorgecastilloprz:fabprogresscircle:1.01@aar'
    implementation 'me.drakeet.support:toastcompat:1.1.0'
    implementation 'com.blacksquircle.ui:editorkit:2.9.0'
    implementation 'com.blacksquircle.ui:language-base:2.9.0'
    implementation 'com.blacksquircle.ui:language-json:2.9.0'
    implementation 'io.github.g00fy2.quickie:quickie-bundled:1.9.0'
    implementation 'com.google.zxing:core:3.5.3'

    implementation "io.github.cymchad:BaseRecyclerViewAdapterHelper4:4.1.4"
    // OpenVpn
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    // Glide image loader
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    androidTestImplementation 'junit:junit:4.12'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.16.0'

    //noinspection GradleDependency
    implementation "androidx.work:work-runtime-ktx:2.8.1"
    //noinspection GradleDependency
    implementation "androidx.work:work-multiprocess:2.8.1"

}
